#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('webserver:server');
var http = require('http');

/////////////////
var WebSocket = require('ws');
require('dns').lookup(require('os').hostname(), function (err, add, fam) {
  console.log('addr: '+add);
});




///////////////
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const s = new WebSocket.Server({ server });

s.on('connection',function(ws,req){
  /******* when server receives messsage from client trigger function with argument message *****/
  ws.on('message',function(message){
    console.log(message);
    //pyshell.send(message);


    //console.log(message);
    s.clients.forEach(function(client){ //broadcast incoming message to all clients (s.clients)
      if(client!=ws && client.readyState ){ //except to the same client (ws) that sent this message


        client.send("broadcast: " +message);



        //logger.log(message);
      }
    });
// ws.send("From Server only to sender: "+ message); //send to client where message is from
  });
  ws.on('close', function(){
    console.log("lost one client");
  });
  ws.on('error', console.log);
//ws.send("new client connected");
  console.log("new client connected");
});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
