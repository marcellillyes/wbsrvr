#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('webserver:server');
var http = require('http');
const dgram = require('dgram');
const EventEmitter = require('events');
const emitter = new EventEmitter();
const fs = require('fs');
const WebSocket = require('ws');

const w = fs.createWriteStream('C:\\Users\\illye\\IdeaProjects\\webserver\\Data' + '/log.txt');

const sok = dgram.createSocket('udp4');

/////////////////

require('dns').lookup(require('os').hostname(), function (err, add, fam) {
  sok.bind({port:8082, address:add});
  setTimeout(function () {
    sok.setBroadcast(true);
    sok.setMulticastTTL(128);
    //sok.addMembership('230.185.192.108');
  }, 1000);
  console.log('addr: '+add);
});

///////////////
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * UDP message event listener
 */

sok.on('message', (msg) => {
  w.write(msg);
});


/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * UDP eventListener : connection active
 */

sok.on('listening', () => {
  let addr = sok.address();
  console.log(`Listening for UDP packets at ${addr.address}:${addr.port}`);
});

const s = new WebSocket.Server({ server});

s.on('connection',function(ws,req){
  //when server receives message from client trigger function with argument message
  ws.on('message',function(message){
   s.clients.forEach(function(client){ //broadcast incoming message to all clients (s.clients)
      if(client!=ws && client.readyState ){ //except to the same client (ws) that sent this message
        client.send(message);
      }
    });
  });
  ws.on('close', function(){
    console.log("lost one client");
  });
  ws.on('error', console.log);
  console.log("new client connected");
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
